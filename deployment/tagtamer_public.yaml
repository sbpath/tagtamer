AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloudformation template for TagTamer solution components - version - RC9

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label:
          default: "Amazon EC2 Configuration"
        Parameters: 
          - KeyName
      - Label:
          default: "ALB Configuration"
        Parameters: 
          - Certificate
          - CIDRIPRange


Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: yourkeyname
  CIDRIPRange:
    Description : >-
      The CIDR IP address range that can be used to access ALB.
      Example: To restrict to particular subnet input 10.10.1.0/24, To allow all subnets input 0.0.0.0/0
    Type: String
    MinLength: 9
    MaxLength: 18
#    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  Certificate:
    Description: >-
      Name of the certificate to use for ALB SSL connections.
      Example: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    Type: String
    Default: arn:aws:acm:region:accountid:certificate/certificateid

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.10.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: Tagtamer-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: Tagtamer-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: Tagtamer-NATGW
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
      Tags:
      - Key: Name
        Value: Tagtamer-EIP


  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.0/26
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
      - Key: Name
        Value: Tagtamer-Public-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.64/26
      AvailabilityZone: !Sub ${AWS::Region}b
      Tags:
      - Key: Name
        Value: Tagtamer-Public-B

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.128/26
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
      - Key: Name
        Value: Tagtamer-Private-A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.192/26
      AvailabilityZone: !Sub ${AWS::Region}b
      Tags:
      - Key: Name
        Value: Tagtamer-Private-B

  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Tagtamer-Public-route

  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  

  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Tagtamer-Private-route

  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway

# Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable


  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Internet facing LoadBalancer security group
      SecurityGroupIngress:
      - CidrIp: !Ref CIDRIPRange
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: !Ref CIDRIPRange
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
      - Key: Name
        Value: Tagtamer-PublicLoadBalancerSecurityGroup

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: TagtamerALB
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups: 
      - Ref: PublicLoadBalancerSecurityGroup
      Tags:
      - Key: Name
        Value: Tagtamer-PublicLoadBalancer

  HTTP443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TagtamerTargetGroup
      LoadBalancerArn:
        Ref: PublicLoadBalancer
      Port: '443'
      Protocol: HTTPS


  TagtamerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TagtamerTargetGroup
      Conditions:
      - Field: path-pattern
        Values:
        - "*"
      ListenerArn:
        Ref: HTTP443Listener
      Priority: 1


  TagtamerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TagtamerTargetGroup
      Port: 443
      Protocol: HTTPS
      VpcId:
        Ref: VPC
      Targets:
      - Id: !Ref EC2Instance
        Port: 443
      Tags:
      - Key: Name
        Value: Tagtamer-TargetGroup

  TagTamerTagGroupsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: tag_group_name
          AttributeType: S
      KeySchema:
        - AttributeName: tag_group_name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: tag_tamer_tag_groups
  TagTamerRolesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: role_arn
          AttributeType: S
      KeySchema:
        - AttributeName: role_arn
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: tag_tamer_roles
  TagTamerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - s3.amazonaws.com
                - dynamodb.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: TagTamerRole
  TagTamerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - TagTamerRole
    DependsOn:
      - TagTamerRole
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http/ssh traffic
      GroupName: SG-TagTamer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt "InstanceSecurityGroup.GroupId"
      ImageId: ami-02a35aaef5d96cafb
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnetA
      IamInstanceProfile: !Ref TagTamerInstanceProfile
      Tags:
        - Key: Name
          Value: Tag Tamer Web App
        - Key: Usage
          Value: Tag Tamer Solution UI
#  EC2InstanceEIP:
#    Type: 'AWS::EC2::EIP'
#    Properties:
#      Domain: vpc
#      InstanceId: !Ref EC2Instance
#    DependsOn:
#      - EC2Instance
  TagTamerPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TagTamerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: configtagging
            Action:
              - 'config:DescribeConfigRules'
              - 'config:PutConfigRule'
            Effect: Allow
            Resource: '*'
          - Sid: ec2tagging
            Action:
              - 'ec2:CreateTags'
              - 'ec2:DeleteTags'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVolumes'
            Effect: Allow
            Resource: '*'
          - Sid: iamtagging
            Action:
              - 'iam:ListRoles'
            Effect: Allow
            Resource: '*'
          - Sid: s3tagging
            Action:
              - 's3:DeleteObjectTagging'
              - 's3:GetBucketTagging'
              - 's3:ListBucket'
              - 's3:PutBucketTagging'
              - 's3:PutObjectTagging'
              - 's3:ReplicateTags'
            Effect: Allow
            Resource: '*'
          - Sid: serviceCatalog
            Action:
              - 'servicecatalog:CreateTagOption'
              - 'servicecatalog:DescribePortfolio'
              - 'servicecatalog:DescribeProduct'
              - 'servicecatalog:DescribeProductAsAdmin'
              - 'servicecatalog:ListTagOptions'
              - 'servicecatalog:SearchProducts'
              - 'servicecatalog:UpdatePortfolio'
              - 'servicecatalog:UpdateProduct'
              - 'servicecatalog:UpdateTagOption'
            Effect: Allow
            Resource: '*'
          - Sid: dynamodbRW
            Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Resource:
              - 'arn:aws:dynamodb:*:*:table/tag_tamer_roles'
              - 'arn:aws:dynamodb:*:*:table/tag_tamer_tag_groups'
      Roles:
        - TagTamerRole
    DependsOn:
      - TagTamerRole


  TagTamerWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: TagTamerWebACL
      Scope: REGIONAL
      Description: Tag Tamer WAF
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: TagTamerWebACL
      Rules:
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 0
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesCommonRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
    DependsOn:
      - PublicLoadBalancer

  TagTamerWebACLAssociation:
    Type: "AWS::WAFv2::WebACLAssociation"
    Properties:
      ResourceArn: !Ref PublicLoadBalancer
      WebACLArn: { "Fn::GetAtt" : ["TagTamerWebACL", "Arn"] }
    DependsOn:
      - TagTamerWebACL

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - AvailabilityZone
  EC2InstancePrivateIP:
    Description: PrivateIP assigned to EC2Instance
    Value: !GetAtt 
      - EC2Instance
      - PrivateIp
  PublicLoadBalancerDNSName:
    Description: Public DNS Name assigned for ALB
    Value: !GetAtt 
      - PublicLoadBalancer
      - DNSName
#  PublicIP:
#    Description: Public IP address of the newly created EC2 instance
#    Value: !GetAtt 
#      - EC2Instance
#      - PublicIp

