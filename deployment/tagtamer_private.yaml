AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloudformation template for TagTamer solution components - version - RC9
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label:
          default: "Amazon EC2 Configuration"
        Parameters: 
          - KeyName
          - CIDRIPRange
          - AMIID
      - Label:
          default: "Network Configuration for EC2"
        Parameters: 
          - VPCID
          - PrivateSubnet
      - Label:
          default: "Cognito configuration for Authentication"
        Parameters: 
          - Email
          - TagTamerUserPoolName

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: yourkeyname
  AMIID:
    Description: Select Amazon Linux AMI to use for Tag Tamer solution. Recommened to use amzn2-ami-hvm-x86_64-gp2.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  VPCID:
    Description: Name of the VPC
    Type: 'AWS::EC2::VPC::Id'
  PrivateSubnet:
    Description: >-
      Name of an existing Private Subnet to deploy ec2. Example: subnet-0a0b04653f7a82e25
    Type: 'AWS::EC2::Subnet::Id'
  CIDRIPRange:
    Description : >-
      The CIDR IP address range that can be used to access Application. 
      Example: To restrict to particular subnet input 10.10.1.0/24, To allow all subnets input 0.0.0.0/0
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  Email:
    Type: String
    Description: Source email address for sending emails to new users.  Must be an SES validated address.
  TagTamerUserPoolName:
    Type: String
    Default: tag-tamer-user-pool
    Description: Name of Tag Tamer's Amazon Cognito User Pool used for user authentication

Resources:

  TagTamerTagGroupsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: tag_group_name
          AttributeType: S
      KeySchema:
        - AttributeName: tag_group_name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: tag_tamer_tag_groups
  TagTamerRolesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: role_arn
          AttributeType: S
      KeySchema:
        - AttributeName: role_arn
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: tag_tamer_roles
  TagTamerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - s3.amazonaws.com
                - dynamodb.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: TagTamerRole
  TagTamerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - TagTamerRole
    DependsOn:
      - TagTamerRole
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http/ssh traffic
      GroupName: SG-TagTamer
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CIDRIPRange
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CIDRIPRange
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref CIDRIPRange
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt "InstanceSecurityGroup.GroupId"
      ImageId: !Ref AMIID
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref TagTamerInstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            cd /var/tmp
            yum -y install git
            git clone https://github.com/sbpath/tagtamer.git
            cd tagtamer/source
            bash tagtamer-install.sh
      Tags:
        - Key: Name
          Value: Tag Tamer Web App
        - Key: Usage
          Value: Tag Tamer Solution UI
  TagTamerPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TagTamerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: configtagging
            Action:
              - 'config:DescribeConfigRules'
              - 'config:PutConfigRule'
            Effect: Allow
            Resource: '*'
          - Sid: ec2tagging
            Action:
              - 'ec2:CreateTags'
              - 'ec2:DeleteTags'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVolumes'
            Effect: Allow
            Resource: '*'
          - Sid: iamtagging
            Action:
              - 'iam:ListRoles'
            Effect: Allow
            Resource: '*'
          - Sid: s3tagging
            Action:
              - 's3:DeleteObjectTagging'
              - 's3:GetBucketTagging'
              - 's3:ListBucket'
              - 's3:PutBucketTagging'
              - 's3:PutObjectTagging'
              - 's3:ReplicateTags'
            Effect: Allow
            Resource: '*'
          - Sid: ssmparameteraccess
            Action:
              - 'ssm:GetParametersByPath'
              - 'ssm:GetParameters'
            Effect: Allow
            Resource: '*'
          - Sid: serviceCatalog
            Action:
              - 'servicecatalog:CreateTagOption'
              - 'servicecatalog:DescribePortfolio'
              - 'servicecatalog:DescribeProduct'
              - 'servicecatalog:DescribeProductAsAdmin'
              - 'servicecatalog:ListTagOptions'
              - 'servicecatalog:SearchProducts'
              - 'servicecatalog:UpdatePortfolio'
              - 'servicecatalog:UpdateProduct'
              - 'servicecatalog:UpdateTagOption'
            Effect: Allow
            Resource: '*'
          - Sid: dynamodbRW
            Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Resource:
              - 'arn:aws:dynamodb:*:*:table/tag_tamer_roles'
              - 'arn:aws:dynamodb:*:*:table/tag_tamer_tag_groups'
      Roles:
        - TagTamerRole
    DependsOn:
      - TagTamerRole

  TagTamerCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          SMSMessage: 'Your Tag Tamer username is {username} and temporary password is {####}. '
          EmailMessage: 'Your username is {username} and temporary password is {####}. '
          EmailSubject: Your temporary Tag Tamer password
      AliasAttributes:
      - email
      - preferred_username
      AutoVerifiedAttributes:
      - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: true
      EmailConfiguration:
        SourceArn: !Sub 
          - 'arn:aws:ses:${MyRegion}:${MyAccountID}:identity/${EmailAddress}'
          - MyRegion: !Ref 'AWS::Region'
            MyAccountID: !Ref 'AWS::AccountId'
            EmailAddress: !Ref Email
        EmailSendingAccount: COGNITO_DEFAULT
      EmailVerificationMessage: 'Your Tag Tamer verification code is {####}. '
      EmailVerificationSubject: Your Tag Tamer verification code
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      Schema:
      - AttributeDataType: String
        Mutable: false
        Name: email
        Required: true
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName:
        Ref: TagTamerUserPoolName
      VerificationMessageTemplate:
        SmsMessage: 'Your verification code is {####}. '
        EmailMessage: 'Your Tag Tamer verification code is {####}. '
        EmailSubject: Your Tag Tamer verification code
        DefaultEmailOption: CONFIRM_WITH_CODE
  TagTamerUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: EC2Instance
      UserPoolId:
        Ref: TagTamerCognitoUserPool
  TagTamerUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
      - code
      - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
      - aws.cognito.signin.user.admin
      - email
      - openid
      - phone
      - profile
      CallbackURLs: 
       - !Sub https://${EC2Instance.PrivateDnsName}/aws_cognito_redirect
      ClientName: tag-tamer-pool-client
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_CUSTOM_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      GenerateSecret: true
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
      - address
      - birthdate
      - email
      - email_verified
      - family_name
      - gender
      - given_name
      - locale
      - middle_name
      - name
      - nickname
      - phone_number
      - phone_number_verified
      - picture
      - preferred_username
      - profile
      - updated_at
      - website
      - zoneinfo
      SupportedIdentityProviders:
      - COGNITO
      UserPoolId:
        Ref: TagTamerCognitoUserPool
      WriteAttributes:
      - address
      - birthdate
      - email
      - family_name
      - gender
      - given_name
      - locale
      - middle_name
      - name
      - nickname
      - phone_number
      - picture
      - preferred_username
      - profile
      - updated_at
      - website
      - zoneinfo

  TagTamerCognitoDefaultRegion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-default-region-value
      Type: String
      Value: !Ref "AWS::Region"

  TagTamerCognitoDomain:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-domain-value
      Type: String
      Value: !Sub https://${EC2Instance}.auth.${AWS::Region}.amazoncognito.com

  TagTamerCognitoUserPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-user-pool-id-value
      Type: String
      Value: !Ref TagTamerCognitoUserPool

  TagTamerCognitoAppClientId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-app-client-id
      Type: String
      Value: !Ref TagTamerUserPoolClient

  TagTamerCognitoAppClientSecret:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-app-client-secret-value
      Type: String
      Value: !GetAtt UserPoolClientInputs.appSecret
    DependsOn: UserPoolClientInputs

  TagTamerCognitoRedirectURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-redirect-url-value
      Type: String
      Value: !Sub https://${EC2Instance.PrivateDnsName}/aws_cognito_redirect

  TagTamerJwtTokenLocation:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-token-location
      Type: String
      Value: cookies

  TagTamerJwtCookiesSecure:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-cookie-secure
      Type: String
      Value: False

  TagTamerJwtAccessCookieName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-access-cookie-name
      Type: String
      Value: access_token

  TagTamerJwtCookieCsrfProtect:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-cookie-csrf-protect
      Type: String
      Value: False

  UserPoolClientRole:
  # Created to execute Lambda which gets userpool app client config values
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: TagTamer-LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
    DependsOn: TagTamerUserPoolClient

  UserPoolClientLambda:
  # Lambda which gets userpool app client config values
  # Depends on UserPool for id
  # Depends on UserPoolClientRole for role ARN
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+
          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const identity = new aws.CognitoIdentityServiceProvider();'
            - 'exports.handler = (event, context, callback) => {'
            - ' if (event.RequestType == ''Delete'') { '
            - '   response.send(event, context, response.SUCCESS, {})'
            - ' }'
            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
            - '   const params = {'
            - '     ClientId: event.ResourceProperties.clientId,'
            - '     UserPoolId: event.ResourceProperties.userpoolId'
            - '   };'
            - '   identity.describeUserPoolClient(params).promise()'
            - '     .then((res) => {'
            - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'  
            - '     })'
            - '     .catch((err) => {'
            - '       response.send(event, context, response.FAILED, {err});'
            - '     });'
            - ' }'
            - '};'
      Handler: index.handler
      Runtime: nodejs10.x
      Timeout: '300'
      Role: !GetAtt 
        - UserPoolClientRole
        - Arn
    DependsOn: UserPoolClientRole

  UserPoolClientLambdaPolicy:
  # Sets userpool policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientRole for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TagTamer-Lambda-Policy
      Roles: 
        - !Ref UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:DescribeUserPoolClient'
            Resource: !GetAtt TagTamerCognitoUserPool.Arn
    DependsOn: UserPoolClientLambda
  UserPoolClientLogPolicy:
  # Sets log policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TagTamer-LambdaLog-Policy
      Roles: 
        - !Ref UserPoolClientRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub  
              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref UserPoolClientLambda}
    DependsOn: UserPoolClientLambdaPolicy  
  UserPoolClientInputs:
  # Values passed to Userpool client Lambda
  # Depends on UserPool for Id
  # Depends on UserPoolClient for Id
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt UserPoolClientLambda.Arn
      clientId: !Ref TagTamerUserPoolClient
      userpoolId: !Ref TagTamerCognitoUserPool
    DependsOn: UserPoolClientLogPolicy


Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
#  AZ:
#    Description: Availability Zone of the newly created EC2 instance
#    Value: !GetAtt 
#      - EC2Instance
#      - AvailabilityZone
  EC2InstancePrivateIP:
    Description: PrivateIP assigned to EC2Instance
    Value: !GetAtt 
      - EC2Instance
      - PrivateIp

  TagTamerURL:
    Description: Login URL for Tag Tamer Application
    Value: !Sub https://${EC2Instance.PrivateDnsName}/sign-in
#  PublicIP:
#    Description: Public IP address of the newly created EC2 instance
#    Value: !GetAtt 
#      - EC2Instance
#      - PublicIp

